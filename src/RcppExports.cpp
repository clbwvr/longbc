// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sqrt_double
double sqrt_double(double x);
RcppExport SEXP _longbc_sqrt_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrt_double(x));
    return rcpp_result_gen;
END_RCPP
}
// cppconcat
NumericVector cppconcat(NumericVector x, NumericVector y);
RcppExport SEXP _longbc_cppconcat(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cppconcat(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cppunlist
NumericVector cppunlist(const List& list);
RcppExport SEXP _longbc_cppunlist(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(cppunlist(list));
    return rcpp_result_gen;
END_RCPP
}
// cppuppertosym
NumericMatrix cppuppertosym(NumericMatrix m);
RcppExport SEXP _longbc_cppuppertosym(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cppuppertosym(m));
    return rcpp_result_gen;
END_RCPP
}
// cppnrm2
double cppnrm2(NumericVector x);
RcppExport SEXP _longbc_cppnrm2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cppnrm2(x));
    return rcpp_result_gen;
END_RCPP
}
// cppmatvec
NumericVector cppmatvec(NumericMatrix m, NumericVector v);
RcppExport SEXP _longbc_cppmatvec(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cppmatvec(m, v));
    return rcpp_result_gen;
END_RCPP
}
// cppsparsematvec
NumericVector cppsparsematvec(Eigen::SparseMatrix<double>& m, NumericVector v);
RcppExport SEXP _longbc_cppsparsematvec(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cppsparsematvec(m, v));
    return rcpp_result_gen;
END_RCPP
}
// cppmatinv
NumericMatrix cppmatinv(Eigen::MatrixXd m);
RcppExport SEXP _longbc_cppmatinv(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cppmatinv(m));
    return rcpp_result_gen;
END_RCPP
}
// cppmatvecold
NumericVector cppmatvecold(NumericMatrix m, NumericVector v);
RcppExport SEXP _longbc_cppmatvecold(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cppmatvecold(m, v));
    return rcpp_result_gen;
END_RCPP
}
// cppl2prox
NumericVector cppl2prox(NumericVector x, double lam);
RcppExport SEXP _longbc_cppl2prox(SEXP xSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(cppl2prox(x, lam));
    return rcpp_result_gen;
END_RCPP
}
// cppsubju
List cppsubju(NumericVector a, NumericVector subj, int n);
RcppExport SEXP _longbc_cppsubju(SEXP aSEXP, SEXP subjSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subj(subjSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(cppsubju(a, subj, n));
    return rcpp_result_gen;
END_RCPP
}
// cppfeatu
List cppfeatu(NumericVector a, NumericVector feat, int p);
RcppExport SEXP _longbc_cppfeatu(SEXP aSEXP, SEXP featSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feat(featSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cppfeatu(a, feat, p));
    return rcpp_result_gen;
END_RCPP
}
// cppaupdate
NumericVector cppaupdate(NumericVector a, List blist, List clist, List deltalist, List etalist, NumericVector subj, NumericVector feat, NumericVector Xty, Eigen::SparseMatrix<double>& XtXrhoDeltai, double rho);
RcppExport SEXP _longbc_cppaupdate(SEXP aSEXP, SEXP blistSEXP, SEXP clistSEXP, SEXP deltalistSEXP, SEXP etalistSEXP, SEXP subjSEXP, SEXP featSEXP, SEXP XtySEXP, SEXP XtXrhoDeltaiSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type blist(blistSEXP);
    Rcpp::traits::input_parameter< List >::type clist(clistSEXP);
    Rcpp::traits::input_parameter< List >::type deltalist(deltalistSEXP);
    Rcpp::traits::input_parameter< List >::type etalist(etalistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subj(subjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feat(featSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type XtXrhoDeltai(XtXrhoDeltaiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppaupdate(a, blist, clist, deltalist, etalist, subj, feat, Xty, XtXrhoDeltai, rho));
    return rcpp_result_gen;
END_RCPP
}
// cppbupdate
List cppbupdate(NumericVector a, List blist, List deltalist, NumericVector subj, List lamlist);
RcppExport SEXP _longbc_cppbupdate(SEXP aSEXP, SEXP blistSEXP, SEXP deltalistSEXP, SEXP subjSEXP, SEXP lamlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type blist(blistSEXP);
    Rcpp::traits::input_parameter< List >::type deltalist(deltalistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subj(subjSEXP);
    Rcpp::traits::input_parameter< List >::type lamlist(lamlistSEXP);
    rcpp_result_gen = Rcpp::wrap(cppbupdate(a, blist, deltalist, subj, lamlist));
    return rcpp_result_gen;
END_RCPP
}
// cppcupdate
List cppcupdate(NumericVector a, List clist, List etalist, NumericVector feat, List lamlist);
RcppExport SEXP _longbc_cppcupdate(SEXP aSEXP, SEXP clistSEXP, SEXP etalistSEXP, SEXP featSEXP, SEXP lamlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type clist(clistSEXP);
    Rcpp::traits::input_parameter< List >::type etalist(etalistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feat(featSEXP);
    Rcpp::traits::input_parameter< List >::type lamlist(lamlistSEXP);
    rcpp_result_gen = Rcpp::wrap(cppcupdate(a, clist, etalist, feat, lamlist));
    return rcpp_result_gen;
END_RCPP
}
// cppdupdate
List cppdupdate(NumericVector a, List blist, List deltalist, NumericVector subj);
RcppExport SEXP _longbc_cppdupdate(SEXP aSEXP, SEXP blistSEXP, SEXP deltalistSEXP, SEXP subjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type blist(blistSEXP);
    Rcpp::traits::input_parameter< List >::type deltalist(deltalistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subj(subjSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdupdate(a, blist, deltalist, subj));
    return rcpp_result_gen;
END_RCPP
}
// cppeupdate
List cppeupdate(NumericVector a, List clist, List etalist, NumericVector feat);
RcppExport SEXP _longbc_cppeupdate(SEXP aSEXP, SEXP clistSEXP, SEXP etalistSEXP, SEXP featSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type clist(clistSEXP);
    Rcpp::traits::input_parameter< List >::type etalist(etalistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feat(featSEXP);
    rcpp_result_gen = Rcpp::wrap(cppeupdate(a, clist, etalist, feat));
    return rcpp_result_gen;
END_RCPP
}
// cppobj
double cppobj(NumericVector a, NumericVector subj, NumericVector feat, double m1, double m2, double lambda, NumericVector w1, NumericVector w2, Eigen::SparseMatrix<double>& X, NumericVector y);
RcppExport SEXP _longbc_cppobj(SEXP aSEXP, SEXP subjSEXP, SEXP featSEXP, SEXP m1SEXP, SEXP m2SEXP, SEXP lambdaSEXP, SEXP w1SEXP, SEXP w2SEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subj(subjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feat(featSEXP);
    Rcpp::traits::input_parameter< double >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< double >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cppobj(a, subj, feat, m1, m2, lambda, w1, w2, X, y));
    return rcpp_result_gen;
END_RCPP
}
// cppadmm
List cppadmm(NumericVector a, List blist, List clist, List deltalist, List etalist, NumericVector subj, NumericVector feat, int n, int p, Eigen::SparseMatrix<double>& X, NumericVector y, double lambda, NumericVector wsubj, NumericVector wfeat, List wlrsubj, List wlrfeat, NumericVector Xty, Eigen::SparseMatrix<double>& XtXrhoDeltai, double rho, int niter, double tolrel, double tolabs, bool trace, bool loud);
RcppExport SEXP _longbc_cppadmm(SEXP aSEXP, SEXP blistSEXP, SEXP clistSEXP, SEXP deltalistSEXP, SEXP etalistSEXP, SEXP subjSEXP, SEXP featSEXP, SEXP nSEXP, SEXP pSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP wsubjSEXP, SEXP wfeatSEXP, SEXP wlrsubjSEXP, SEXP wlrfeatSEXP, SEXP XtySEXP, SEXP XtXrhoDeltaiSEXP, SEXP rhoSEXP, SEXP niterSEXP, SEXP tolrelSEXP, SEXP tolabsSEXP, SEXP traceSEXP, SEXP loudSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type blist(blistSEXP);
    Rcpp::traits::input_parameter< List >::type clist(clistSEXP);
    Rcpp::traits::input_parameter< List >::type deltalist(deltalistSEXP);
    Rcpp::traits::input_parameter< List >::type etalist(etalistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type subj(subjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feat(featSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wsubj(wsubjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wfeat(wfeatSEXP);
    Rcpp::traits::input_parameter< List >::type wlrsubj(wlrsubjSEXP);
    Rcpp::traits::input_parameter< List >::type wlrfeat(wlrfeatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type XtXrhoDeltai(XtXrhoDeltaiSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type tolrel(tolrelSEXP);
    Rcpp::traits::input_parameter< double >::type tolabs(tolabsSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type loud(loudSEXP);
    rcpp_result_gen = Rcpp::wrap(cppadmm(a, blist, clist, deltalist, etalist, subj, feat, n, p, X, y, lambda, wsubj, wfeat, wlrsubj, wlrfeat, Xty, XtXrhoDeltai, rho, niter, tolrel, tolabs, trace, loud));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _longbc_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _longbc_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _longbc_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _longbc_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_longbc_sqrt_double", (DL_FUNC) &_longbc_sqrt_double, 1},
    {"_longbc_cppconcat", (DL_FUNC) &_longbc_cppconcat, 2},
    {"_longbc_cppunlist", (DL_FUNC) &_longbc_cppunlist, 1},
    {"_longbc_cppuppertosym", (DL_FUNC) &_longbc_cppuppertosym, 1},
    {"_longbc_cppnrm2", (DL_FUNC) &_longbc_cppnrm2, 1},
    {"_longbc_cppmatvec", (DL_FUNC) &_longbc_cppmatvec, 2},
    {"_longbc_cppsparsematvec", (DL_FUNC) &_longbc_cppsparsematvec, 2},
    {"_longbc_cppmatinv", (DL_FUNC) &_longbc_cppmatinv, 1},
    {"_longbc_cppmatvecold", (DL_FUNC) &_longbc_cppmatvecold, 2},
    {"_longbc_cppl2prox", (DL_FUNC) &_longbc_cppl2prox, 2},
    {"_longbc_cppsubju", (DL_FUNC) &_longbc_cppsubju, 3},
    {"_longbc_cppfeatu", (DL_FUNC) &_longbc_cppfeatu, 3},
    {"_longbc_cppaupdate", (DL_FUNC) &_longbc_cppaupdate, 10},
    {"_longbc_cppbupdate", (DL_FUNC) &_longbc_cppbupdate, 5},
    {"_longbc_cppcupdate", (DL_FUNC) &_longbc_cppcupdate, 5},
    {"_longbc_cppdupdate", (DL_FUNC) &_longbc_cppdupdate, 4},
    {"_longbc_cppeupdate", (DL_FUNC) &_longbc_cppeupdate, 4},
    {"_longbc_cppobj", (DL_FUNC) &_longbc_cppobj, 10},
    {"_longbc_cppadmm", (DL_FUNC) &_longbc_cppadmm, 24},
    {"_longbc_rcppeigen_hello_world", (DL_FUNC) &_longbc_rcppeigen_hello_world, 0},
    {"_longbc_rcppeigen_outerproduct", (DL_FUNC) &_longbc_rcppeigen_outerproduct, 1},
    {"_longbc_rcppeigen_innerproduct", (DL_FUNC) &_longbc_rcppeigen_innerproduct, 1},
    {"_longbc_rcppeigen_bothproducts", (DL_FUNC) &_longbc_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_longbc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
