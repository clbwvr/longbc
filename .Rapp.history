outs
res
ls()
cvxbicluster::
library("cvxbiclustr")
install.packages("cvxbiclustr")
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
saveRDS("dat", "simulated_data.rds")
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")
dats[[1]]
dats[[1]][[1]]
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dats[[1]][[1]]
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
dofnaive = function(datres){#
  parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  ### #
  # OLS #
  Betahat = as.matrix(dcast(data=g, subj ~ feat, value.var="ols")[,-1])#
  ari.ols = 0#
  mse.ols = mean((ols - betaij)^2)#
  matshow(Betahat)#
  nb.ols = nrow(g)#
  ####
  ### #
  # DCT #
  distr = dist(Betahat)#
  distc = dist(t(Betahat))#
  hr = hclust(distr)#
  hc = hclust(distc)#
  r = dynamicTreeCut::cutreeHybrid(hr, distM = as.matrix(distr),verbose=0)$labels#
  c = dynamicTreeCut::cutreeHybrid(hc, distM = as.matrix(distc),verbose=0)$labels#
  g1=expand.grid(c,r)#
  g1$cb = as.numeric(factor(paste(g1$Var1,g1$Var2)))#
  ari0 = adjustedRandIndex(g1$cb, g$cb)#
  nb0 = length(unique(g1$cb))#
  #matshow(Betahat[order(r),order(c)])#
  ####
  ### #
  # Sparse BC#
  set.seed(NULL)#
  res1 = spbc.cv(Betahat, 1:min(n-1, 2*snb),1:min(p-1, 2*snb),0)#
  ari1 = adjustedRandIndex(res1[[1]]$cb, g$cb)#
  nb1 = length(unique(res1[[1]]$cb))#
  gcs = res1[[1]][,c("subj","cs")]#
  cs1 = gcs[!duplicated(gcs),"cs"]#
  gcf = g[,c("feat","cf")]#
  cf1 = gcf[!duplicated(gcf),"cf"]#
  matshow(Betahat[order(cs1),order(cf1)])#
  ### #
  ### #
  # COBRA#
  A = Betahat#
  A = A - sum(A)/length(A)#
  A = A/norm(A,"f")#
  wts = cvxbiclustr::gkn_weights(A)#
  w_row = wts$w_row#
  w_col = wts$w_col#
  E_row = wts$E_row#
  E_col = wts$E_col#
  #### Initialize path parameters and structures#
  nGamma = 10#
  ## Generate solution path#
  sol = NULL#
  mg = 0#
  gammaSeq <- 10**seq(.5,1,length.out=nGamma)#
  sol <- hush({cobra_validate(A,E_row,E_col,w_row,w_col,gammaSeq)})#
  sink()#
  verr = sol$validation_error#
  ix = max(which(verr == min(verr)))#
  U = sol$U[[ix]]#
  r = sol$groups_row[[ix]]$cluster#
  c = sol$groups_col[[ix]]$cluster#
  g1 = expand.grid(c,r)#
  cb = as.numeric(factor(paste(g1[,1], g1[,2])))#
  ari2 = adjustedRandIndex(cb, g$cb)#
  nb2 = length(unique(cb))#
  #matshow(Betahat[order(r),order(c)])#
  ### #
  return(list(dat=dat, nb=c(nb0,nb1,nb2), ari=c(ari0,ari1,ari2)))#
}
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
library(gplots)
library(pals)
library(RColorBrewer)
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
library(unikn)
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
source("bicluster_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
library(mclust)#
library(unikn)#
library(gplots)#
#
#' @export#
parmf = function(ns = c(20,100), ps = c(10,30), snrs = c(.5, 1),ms=c(5), nbs = c(9, 16),grids=c(TRUE,FALSE),exchs=c(TRUE,FALSE)){#
  parammat = expand.grid(n=ns, p=ps, snr=snrs, nb=nbs,m=ms, grid=grids,exch=exchs)#
  parammat = parammat[order(parammat$n,parammat$p,parammat$snr,parammat$nb,parammat$grid,parammat$exch),]#
  paramlist = lapply(1:nrow(parammat), function(i) parammat[i,])#
  return(paramlist)#
}#
#
### Simulation function#
#' @export#
datf = function(parm){#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  m = parm$m#
  exch = parm$exch#
  grid = parm$grid#
  salpha = .0001#
  if(exch){ #exchangable#
    R = matrix(.5, p, p)#
    diag(R) = 1#
    P = diag(sqrt(salpha),p,p) %*% R %*% diag(sqrt(salpha),p,p) #
    V = kronecker(diag(n),P)#
    alpha = Rfast::rmvnorm(100, rep(0,n*p), V)#
  } else{ # independent#
    R = matrix(0, p, p)#
    diag(R) = 1#
    P = diag(sqrt(salpha),p,p) %*% R %*% diag(sqrt(salpha),p,p) #
    V = kronecker(diag(n),P)#
    alpha = c(Rfast::rmvnorm(1, rep(0,n*p), V))#
  }#
  beta = sample((-10):10,nb,FALSE)#
  subj = 1:n#
  feat = 1:p#
  dfs = data.frame(subj=subj, cs=sample(1:sqrt(nb),n,TRUE))#
  dff = data.frame(feat=feat, cf=sample(1:sqrt(nb),p,TRUE))#
  g = expand.grid(subj=subj, feat=feat)#
  g = merge(g, dfs, by="subj")#
  g = merge(g, dff, by="feat")#
  g = g[order(g$subj, g$feat),]#
  g$unit = factor(paste0(g$subj,"_",g$feat))#
  g$cb = as.numeric(as.factor(paste(g$cs, g$cf)))#
  CB = dcast(data=g, subj ~ feat, value.var="cb")#
  CB = as.matrix(CB[,-1])#
  alphaij = alpha[as.numeric(g$unit)]#
  betaij = beta[g$cb]#
  g$alpha = alphaij#
  g$beta = betaij#
  Beta = dcast(data=g, subj ~ feat, value.var="beta")#
  Beta = as.matrix(Beta[,-1])#
  # Create design matrix#
  if(grid) {#
    dat = expand.grid(subj=1:n, feat=1:p, t=0:(m-1)); #
    dat = dat[order(dat$subj, dat$feat, dat$t),]#
  } else{#
    subjs = feats = ts = c()#
    for(i in 1:n){#
      mi = sample(c(3,4,5,6),1)#
      ti = c(0, sort(sample(1:5, mi-1, replace=FALSE,prob = c(1,.8,.6,.4,.2))))#
      for(j in 1:p){#
        subjs = c(subjs, rep(i, mi))#
        feats = c(feats, rep(j, mi))#
        ts = c(ts, ti)#
      }#
    }#
    dat = data.frame(subj = subjs, feat=feats, t=ts)#
  }#
  datx = dat#
  datx$row = 1:nrow(datx)#
  datx$int = 1#
  X = dcast(data=datx, row ~ subj+feat, value.var="t",fill = 0)[,-1]#
  X = Matrix(as.matrix(X), sparse=TRUE)#
  Z = dcast(data=datx, row ~ subj+feat, value.var="int",fill = 0)[,-1]#
  Z = Matrix(as.matrix(Z), sparse=TRUE)#
  ey = as.numeric(Z%*%alphaij + X%*%betaij)#
  N = length(ey)#
  white = rnorm(N)#
  signal = var(ey)#
  k = sqrt(signal) / snr * var(white)#
  e = k * white#
  y = ey + e#
  # Get Delta matrix#
  D = matrix(0,n*p,n*p)#
  A = -diag(p)#
  for(i in 1:(n-1)){#
    for(ip in (i+1):n){#
      D[g$subj==i,g$subj==ip] = A#
    }#
  }#
  D = upper.to.sym(D)#
  diag(D) = n-1#
  Dt = matrix(0,n*p,n*p)#
  for(i in 1:(n)){#
    Dt[g$subj==i, g$subj==i] = -1#
  }#
  diag(Dt) = p-1#
  Delta = D + Dt#
  rho = 1#
  XtXrhoDelta = Matrix::crossprod(X,X) + rho * Delta#
  XtXrhoDeltai = matrix(solve(XtXrhoDelta),n*p,n*p)#
  XtXrhoDeltai[matrix(XtXrhoDelta==0,n*p,n*p)] = 0#
  XtXrhoDeltai = Matrix(XtXrhoDeltai,sparse=TRUE)#
  XtXrhoDeltai = as(XtXrhoDeltai, "dgCMatrix")#
  dat$ey = ey#
  dat$y = y#
  agg = aggregate(data=dat[dat$t==0,], y~feat, mean)#
  colnames(agg)[2] = "featmean"#
  dat = merge(dat, agg, by="feat")#
  dat$y = dat$y-dat$featmean#
  # agg = aggregate(data=dat[dat$t==0,], y~feat, sd)#
  # colnames(agg)[2] = "featsd"#
  # dat = merge(dat, agg, by="feat")#
  # dat$y = dat$y/dat$featsd#
  dat = dat[,!(colnames(dat) %in% c("featmean","featsd"))]#
  dat = merge(dat, g, by=c("subj","feat"))#
  dat = dat[order(dat$subj, dat$feat, dat$t),]#
  # Initial parameter estimate#
  XtX = Matrix::crossprod(X,X)#
  Xty = Matrix::crossprod(X,y)#
  ols = as.numeric(Matrix::solve(XtX, Xty))#
  g = dat[,c("subj","feat","cs","cf","cb")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  return(list(parm, dat, XtXrhoDeltai, V, ols))#
}#
#
dofnaive = function(datres){#
  parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  ### #
  # OLS #
  Betahat = as.matrix(dcast(data=g, subj ~ feat, value.var="ols")[,-1])#
  ari.ols = 0#
  mse.ols = mean((ols - betaij)^2)#
  matshow(Betahat)#
  nb.ols = nrow(g)#
  ####
  ### #
  # DCT #
  distr = dist(Betahat)#
  distc = dist(t(Betahat))#
  hr = hclust(distr)#
  hc = hclust(distc)#
  r = dynamicTreeCut::cutreeHybrid(hr, distM = as.matrix(distr),verbose=0)$labels#
  c = dynamicTreeCut::cutreeHybrid(hc, distM = as.matrix(distc),verbose=0)$labels#
  g1=expand.grid(c,r)#
  g1$cb = as.numeric(factor(paste(g1$Var1,g1$Var2)))#
  ari0 = adjustedRandIndex(g1$cb, g$cb)#
  nb0 = length(unique(g1$cb))#
  #matshow(Betahat[order(r),order(c)])#
  ####
  ### #
  # Sparse BC#
  set.seed(NULL)#
  res1 = spbc.cv(Betahat, 1:min(n-1, 2*snb),1:min(p-1, 2*snb),0)#
  ari1 = adjustedRandIndex(res1[[1]]$cb, g$cb)#
  nb1 = length(unique(res1[[1]]$cb))#
  gcs = res1[[1]][,c("subj","cs")]#
  cs1 = gcs[!duplicated(gcs),"cs"]#
  gcf = g[,c("feat","cf")]#
  cf1 = gcf[!duplicated(gcf),"cf"]#
  matshow(Betahat[order(cs1),order(cf1)])#
  ### #
  ### #
  # COBRA#
  A = Betahat#
  A = A - sum(A)/length(A)#
  A = A/norm(A,"f")#
  wts = cvxbiclustr::gkn_weights(A)#
  w_row = wts$w_row#
  w_col = wts$w_col#
  E_row = wts$E_row#
  E_col = wts$E_col#
  #### Initialize path parameters and structures#
  nGamma = 10#
  ## Generate solution path#
  sol = NULL#
  mg = 0#
  gammaSeq <- 10**seq(.5,1,length.out=nGamma)#
  sol <- hush({cobra_validate(A,E_row,E_col,w_row,w_col,gammaSeq)})#
  sink()#
  verr = sol$validation_error#
  ix = max(which(verr == min(verr)))#
  U = sol$U[[ix]]#
  r = sol$groups_row[[ix]]$cluster#
  c = sol$groups_col[[ix]]$cluster#
  g1 = expand.grid(c,r)#
  cb = as.numeric(factor(paste(g1[,1], g1[,2])))#
  ari2 = adjustedRandIndex(cb, g$cb)#
  nb2 = length(unique(cb))#
  #matshow(Betahat[order(r),order(c)])#
  ### #
  return(list(dat=dat, nb=c(nb0,nb1,nb2), ari=c(ari0,ari1,ari2)))#
}#
#
#' @export#
dof = function(parm, ntimes){#
    # Longitudinal BC#
    fit = longbc:::longbc(dat = dat, lambdas = seq(0,800,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 50, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
    # plot(fit,1)#
    # plot(fit,2)#
    # plot(fit,3)#
    # plot(fit,4)#
    aris = longbc:::ari.longbc(fit, g)#
    best = which.max(aris)#
    ari3 = max(aris)#
    nb3 = length(unique(fit$fits[[best]]$cb))#
    return(list(dat=dat, nb=c(nb0,nb1,nb2,nb3), ari=c(ari0,ari1,ari2,ari3)))#
}#
#
#' @export#
plotdat = function(dat){#
  par(mfrow=c(1,2))#
  nb = length(unique(dat$cb))#
  datmat = dcast(data=dat, cb + subj + feat  ~ t, value.var="ey")#
  matplot(t(datmat[,-c(1,2,3)]), type="l",  col=rainbow(nb)[datmat$cb], lty=1)#
  datmat = dcast(data=dat, cb + subj + feat  ~ t, value.var="y")#
  matplot(t(datmat[,-c(1,2,3)]), type="l", col=rainbow(nb)[datmat$cb], lty=1)#
  par(mfrow=c(1,1))#
}
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
#' @export#
matshow = function (A, key=FALSE, labRow = FALSE,labCol = FALSE,...){#
  cols = rev(unikn::usecol(c(rev(  RColorBrewer::brewer.pal(n = 8, name = "Reds")), "white", RColorBrewer::brewer.pal(n = 8, name = "Blues")), n = 256))#
  if(key){#
    gplots::heatmap.2(A,symm=F,symkey=F,symbreaks=T, scale="none",density.info = "none",labRow=labRow, labCol=labCol, col = cols, na.color="white",tracecol=NA,dendrogram = "none",Rowv = FALSE, Colv = FALSE,colsep=c(0,ncol(A)),rowsep=c(0,nrow(X)),sepcolor="black",key=TRUE,...)#
  }else{#
    gplots::heatmap.2(A,symm=F,symkey=F,symbreaks=T, scale="none",density.info = "none", labRow=labRow, labCol=labCol, col = cols, na.color="white",tracecol=NA,dendrogram = "none",Rowv = FALSE, Colv = FALSE,  #
              colsep=c(0,ncol(A)), rowsep=c(0,nrow(A)),sepcolor="black",keysize = .1,margins = c(2,2),key=FALSE,key.par = list(cex=.5),...)#
  }#
}#
#
#' @export#
logseq = function(from, to, length.out) exp(seq(log(from),log(to),length.out=length.out))#
#
#' @export#
nrm1 = function(x) sum(abs(x))#
#
#' @export#
nrm2 = function(x) as.numeric(sqrt(crossprod(x,x)))#
#
#' @export#
l1prox = function(x,t){#
  soft = function(u) sign(u)*max(abs(u)-t,0)#
  return(sapply(x,soft))#
}#
#
#' @export#
l2prox = function(x,lam){#
  nrm = nrm2(x)#
  t = 1-lam/nrm#
  s = max(0, t)#
  return(s*x)#
}#
#
#' @export#
l12prox = function(x,lam1,lam2){#
  l1prox(l2prox(x,lam2),lam1)#
}#
#
#' @export#
upper.to.sym = function(x){#
  x[lower.tri(x)] = t(x)[lower.tri(x)]#
  x#
}#
lower.to.sym = function(x){#
  x[upper.tri(x)] = t(x)[upper.tri(x)]#
  x#
}#
#
ar.mat = function(n,order,rho){#
  A = diag(n)#
  for(i in 1:order){#
    for(j in 1:(n-i)){#
      A[j,j+i] = A[j+i,j] = rho^i#
    }#
  }#
  A#
}#
#
hush=function(code){#
  sink("/dev/null")#
  tmp = code#
  sink()#
  return(tmp)#
}#
#
theme_caleb<- function(base_size=14) {#
  library(grid)#
  library(ggthemes)#
  (theme_foundation(base_size=base_size,base_family="LM Roman 10")#
    + theme(plot.title = element_text(face = "bold",#
                                      size = rel(1.2), hjust = 0.5),#
            text = element_text(),#
            panel.background = element_rect(colour = NA),#
            plot.background = element_rect(colour = NA),#
            panel.border = element_rect(colour = NA),#
            axis.title = element_text(face = "bold",size = rel(1)),#
            axis.title.y = element_text(angle=90,vjust =2),#
            axis.title.x = element_text(vjust = -0.2),#
            axis.text = element_text(), #
            axis.line = element_line(colour="black"),#
            axis.ticks = element_line(),#
            panel.grid.major = element_line(colour="#f0f0f0"),#
            panel.grid.minor = element_blank(),#
            legend.key = element_rect(colour = NA),#
            legend.position = "bottom",#
            legend.direction = "horizontal",#
            legend.key.size= unit(0.2, "cm"),#
            legend.margin = unit(0, "cm"),#
            legend.title = element_text(face="italic"),#
            plot.margin=unit(c(10,5,5,5),"mm"),#
            strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),#
            strip.text = element_text(face="bold")#
    ))#
}#
#
theme_publish <- function(base_size = 10, base_family = "",#
                          line_size = 0.25, ...) {#
  half_line <- base_size / 2#
  small_rel <- 0.8#
  small_size <- small_rel * base_size#
  theme_bw(base_size = base_size, base_family = base_family, ...) %+replace%#
    theme(#
      rect = element_rect(fill = "transparent", colour = NA, color = NA,#
                          size = 0, linetype = 0),#
      text = element_text(family = base_family, face = "plain",#
                          colour = "black", size = base_size, hjust = 0.5,#
                          vjust = 0.5, angle = 0, lineheight = 0.9,#
                          margin = ggplot2::margin(), debug = F),#
      axis.text = element_text(size = small_size),#
      axis.text.x = element_text(margin = ggplot2::margin(t = small_size/4),#
                                 vjust = 1),#
      axis.text.y = element_text(margin = ggplot2::margin(r = small_size/4), #
                                 hjust = 1),#
      axis.title.x = element_text(margin = ggplot2::margin(t = small_size,#
                                                           b = small_size)),#
      axis.title.y = element_text(angle = 90,#
                                  margin = ggplot2::margin(r = small_size,#
                                                           l = small_size/4)),#
      axis.ticks = element_line(colour = "black", size = line_size),#
      axis.ticks.length = unit(0.25, 'lines'),#
      axis.line = element_line(colour = "black", size = line_size),#
      axis.line.x = element_line(colour = "black", size = line_size), #
      axis.line.y = element_line(colour = "black", size = line_size), #
      legend.spacing = unit(base_size/4, "pt"),#
      legend.key = element_blank(),#
      legend.key.size = unit(1 * base_size, "pt"),#
      legend.key.width = unit(1.5 * base_size, 'pt'),#
      legend.text = element_text(size = rel(small_rel)),#
      legend.title = element_text(size = rel(small_rel)),#
      legend.position = 'bottom',#
      legend.box = 'horizontal',#
      panel.spacing = unit(1, "lines"),#
      panel.background = element_blank(),#
      panel.border = element_blank(), #
      panel.grid.major = element_blank(),#
      panel.grid.minor = element_blank(),#
      strip.text = element_text(size = base_size),#
      strip.background = element_rect(fill = NA, colour = "black", size = 0.125),#
      strip.text.x = element_text(hjust = 0,#
                                  margin = ggplot2::margin(b = small_size/2,#
                                                           t = small_size/4)),#
      strip.text.y = element_text(angle = -90,margin = ggplot2::margin(l = small_size/2,#
                                                           r = small_size/4)),#
      plot.margin = unit(c(5,5,0,0), "pt"),#
      plot.background = element_blank(),#
      plot.title = element_text(size = 1.2 * base_size, #
                                margin = ggplot2::margin(b = half_line),#
                                hjust = 0)#
    )#
}#
#
scale_fill_caleb <- function(...){#
  library(scales)#
  discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)#
}#
#
scale_color_caleb <- function(...){#
  library(scales)#
  discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)#
}#
a.update = function(a, blist, clist, deltalist, etalist, Vi) {#
  d1 = 0#
  for (i in 1:(n - 1)) {#
    for (ip in (i + 1):n) {#
      d1s = rep(0, n*p)#
      x = (blist[[i]][[ip]] - deltalist[[i]][[ip]])#
      d1s[g$subj==i] = x#
      d1s[g$subj==ip] = -x#
      d1 = d1 + d1s#
      #d1 = d1 + tDlist[[i]][[ip]] %*% (blist[[i]][[ip]] - deltalist[[i]][[ip]])#
    }#
  }#
  d2 = 0#
  for (i in 1:(p - 1)) {#
    for (ip in (i + 1):p) {#
      d2s = rep(0, n*p)#
      x = (clist[[i]][[ip]] - etalist[[i]][[ip]])#
      d2s[g$feat==i] = x#
      d2s[g$feat==ip] = -x#
      d2 = d2 + d2s#
      #d2 = d2 + tDtlist[[i]][[ip]] %*% (clist[[i]][[ip]] - etalist[[i]][[ip]])#
    }#
  }#
  d = d1 + d2#
  out = XtXrhoDeltai %*% (Xty + rho * d)#
  return(as.vector(out))#
}#
#
b.update = function(a, blist, clist, deltalist, etalist) {#
  bnewlist = list()#
  for(i in 1:(n-1)){#
    bnewlist[[i]] = list()#
    for(ip in (i+1):n){#
      b.y = (a[g$subj==i] - a[g$subj==ip]) + deltalist[[i]][[ip]]#
      bnewlist[[i]][[ip]] = l2prox(b.y, wl1[[i]][[ip]]*lambda/rho)#
    }#
  }#
  return(bnewlist)#
}#
c.update = function(a, blist, clist, deltalist, etalist) {#
  cnewlist = list()#
  for(i in 1:(p-1)){#
    cnewlist[[i]] = list()#
    for(ip in (i+1):p){#
      c.y = (a[g$feat==i] - a[g$feat==ip])  + etalist[[i]][[ip]]#
      cnewlist[[i]][[ip]] = l2prox(c.y,  wl2[[i]][[ip]]*lambda/rho)#
    }#
  }#
  return(cnewlist)#
}#
#
delta.update = function(a, blist, clist, deltalist, etalist) {#
  deltanewlist = list()#
  for (i in 1:(n - 1)) {#
    deltanewlist[[i]] = list()#
    for (ip in (i + 1):n) {#
      deltanewlist[[i]][[ip]] = deltalist[[i]][[ip]] + (a[g$subj==i] - a[g$subj==ip])  - blist[[i]][[ip]]#
    }#
  }#
  return(deltanewlist)#
}#
eta.update = function(a, blist, clist, deltalist, etalist) {#
  etanewlist = list()#
  for (i in 1:(p - 1)) {#
    etanewlist[[i]] = list()#
    for (ip in (i + 1):p) {#
      etanewlist[[i]][[ip]] = etalist[[i]][[ip]] + (a[g$feat==i] - a[g$feat==ip]) - clist[[i]][[ip]]#
    }#
  }#
  return(etanewlist)#
}#
V.update = function(a, Vstruct){#
  if(Vstruct=="id") V = diag(N)#
  else{#
    fopt = function(r){#
      yhat = X%*%a#
      mse = mean((y-X%*%a)^2)#
      V = matrix(mse * r, N, N)#
      diag(V) = mse#
      sum(mvtnorm::dmvnorm(x=as.numeric(y-yhat),  mean = rep(0,N), sigma = sqrt(V)),log=TRUE)#
    }#
    r = optimize(fopt, c(-.99,.99))#
  }#
}
setwd("/users/cweaver3/projects/research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
setwd("/Users/cweaver3/Projects/Research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.r")#
source("R/helpers.r")#
library(longbc)#
source("sim_fns.r")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
dofnaive(dats[[1]])
res = lapply(dats, dofnaive)
setwd("/Users/cweaver3/Projects/Research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.r")#
source("R/helpers.r")#
library(longbc)#
source("sim_fns.r")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
res = lapply(dats, dofnaive)setwd("/Users/cweaver3/Projects/Research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.r")#
source("R/helpers.r")#
library(longbc)#
source("sim_fns.r")#
source("bicluster_fns.R")#
source("sim_fns.R")#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
res = lapply(dats, dofnaive)
setwd("/Users/cweaver3/Projects/Research/Longitudinal Biclustering/longbc")#
source("bicluster_fns.r")#
source("R/helpers.r")#
source("sim_fns.R")#
library(longbc)#
library(sparseBC)#
library(cvxbiclustr)#
library(Rcpp)#
library(dplyr)#
library(reshape2)#
dats = readRDS("simulated_data.rds")#
res = lapply(dats, dofnaive)
dofnaive(dats[[1]])
dofnaive(dats[[2]])
dofnaive(dats[[3]])
res = lapply(dats, dofnaive)
dofnaive(dats[[1]])
outs = list()
for(i in 1:72){outs[[i]]=dofnaive(dats[[i]])}
for(i in 1:72){outs[[i]]=dofnaive(dats[[i]]); print(i)}
dofnaive(dats[[50]])
dats[[50]]
length(dats)
dats
hust()
hush()
hush()
dev.off()
print()
print("a")
sink()
sink()
sink()
sink()
sink()
sink()
print("a")
dats[[50]]
dofnaive(dats[[51]])
for(i in 1:72)[-50]){outs[[i]]=dofnaive(dats[[i]]); print(i)}
for(i in (1:72)[-50]){outs[[i]]=dofnaive(dats[[i]]); print(i)}
for(i in 1:72)){tryCatch({outs[[i]]=dofnaive(dats[[i]]); print(i)}, error = function(e) e)}
for(i in 1:72){tryCatch({outs[[i]]=dofnaive(dats[[i]]); print(i)}, error = function(e) e)}
for(i in 1:72) print(i)
print(i)
length(outs)
outs[[1]]
A = lapply(outs, function(u) u$ari)
A = do.call(rbind, A)
A
Z = lapply(outs, function(u) u[[1]])
Z
Z = lapply(outs, function(u) u[[2]])
Z
outs[[1]]
dofnaive(dats[[72]])
dofnaive(dats[[71]])
length(dats)
dofnaive(dats[[64]])
outs[[64]][[1]]
outs[[64]][[2]]
outs[[64]][[3]]
for(i in 1:72){tryCatch({outs[[i]]=dofnaive(dats[[i]]); print(i)}, error = function(e) {outs[[i]]=c(NA,NA,NA); print(i)})}
A = lapply(outs, function(u) u$ari)#
A = do.call(rbind, A)
A
A
A = lapply(outs, function(u) u$ari)
A
A[[50]] = c(NA,NA,NA)
A
A[[53]] = c(NA,NA,NA)
A[[54]] = c(NA,NA,NA)
A[[56]] = c(NA,NA,NA)
A
do.call(rbind, A)
parm
param
parms
length(dats)
paramlist = parmf(c(50,100),c(10,30),c(1,2),c(4),c(9,16),c(TRUE,FALSE),c(TRUE,FALSE))
parammat = do.call(rbind, paramlist)
B = cbind(parammat, A)
A
B = cbind(parammat, do.call(rbind, A))
B
B = data.frame(B)
B
names(B)
B$X1
plot(B$n, B$X1)
plot(B$n, B$X2)
plot(B$n, B$X3)
plot(B$n, B$X4)
plot(B$n, B$X3)
plot(B$p, B$X3)
plot(Bsnrp, B$X3)
plot(Bsnr, B$X3)
plot(B$snr, B$X3)
plot(B$nb, B$X3)
plot(B$grid, B$X3)
plot(B$exch, B$X3)
library(parallel)
res
f = function() { for(i in 1:72){tryCatch({outs[[i]]=dofnaive(dats[[i]]); print(i)}, error = function(e) {outs[[i]]=c(NA,NA,NA); print(i)})}; return(outs)}
f
f()
library(parallel)
res = mclapply(1:64, function(u) f())
res = mclapply(1:10, function(u) f(), mc.cores = detectCores()-1)
A = do.call(rbind, lapply(res[[1]], function(u) u$ari))#
B = cbind(parammat, A)
A = lapply(res[[1]], function(u) u$ari)
A
A = lapply(res[[1]], function(u) ifelse(is.null(u$ari), c(NA,NA,NA), u$ari)
)
A
A = lapply(res[[1]], function(u){ifis.null(u$ari), c(NA,NA,NA), u$ari)
A
A = lapply(res[[1]], function(u) u$ari)
A[[50]]
A[[50]] = c(NA,NA,NA)
A[[53]] = c(NA,NA,NA)
A
A[[54]] = c(NA,NA,NA)
A[[56]] = c(NA,NA,NA)
A
A
A[[50]] do.call(rbind, A)
do.call(rbind, A)
b=list()#
for(i in 1:64){#
  A = lapply(res[[1]], function(u) u$ari)#
  A[[50]] = c(NA,NA,NA)#
  A[[53]] = c(NA,NA,NA)#
  A[[54]] = c(NA,NA,NA)#
  A[[56]] = c(NA,NA,NA)#
  b[[i]] = do.call(rbind, A)#
  b[[i]] = cbind(parammat, b[[i]])#
}
b[[1]]
res = do.call(rbind, b)
res
dim(b)
b
dim(res)
aggregate(data=res, X3 ~ n + p + snr + nb + grid + exch)
res$
names(res)
aggregate(data=res, `1` ~ n + p + snr + nb + grid + exch)
aggregate(data=res, `1` ~ n + p + snr + nb + grid + exch, mean)
aggregate(data=res, `2` ~ n + p + snr + nb + grid + exch)
aggregate(data=res, `2` ~ n + p + snr + nb + grid + exch, mean)
aggregate(data=res, `2` ~ n + p + snr, mean)
aggregate(data=res, `3` ~ n + p + snr, mean)
aggregate(data=res, `3` ~ n + p + grid, mean)
aggregate(data=res, `2` ~ n + p + grid, mean)
res
res = mclapply(1:20, function(u) f(), mc.cores = detectCores()-1)
b=list()#
for(i in 1:64){#
  A = lapply(res[[1]], function(u) u$ari)#
  A[[50]] = c(NA,NA,NA)#
  A[[53]] = c(NA,NA,NA)#
  A[[54]] = c(NA,NA,NA)#
  A[[56]] = c(NA,NA,NA)#
  b[[i]] = do.call(rbind, A)#
  b[[i]] = cbind(parammat, b[[i]])#
}
b=list()#
for(i in 1:64){#
  A = lapply(res[[i]], function(u) u$ari)#
  A[[50]] = c(NA,NA,NA)#
  A[[53]] = c(NA,NA,NA)#
  A[[54]] = c(NA,NA,NA)#
  A[[56]] = c(NA,NA,NA)#
  b[[i]] = do.call(rbind, A)#
  b[[i]] = cbind(parammat, b[[i]])#
}
b=list()#
for(i in 1:20){#
  A = lapply(res[[i]], function(u) u$ari)#
  A[[50]] = c(NA,NA,NA)#
  A[[53]] = c(NA,NA,NA)#
  A[[54]] = c(NA,NA,NA)#
  A[[56]] = c(NA,NA,NA)#
  b[[i]] = do.call(rbind, A)#
  b[[i]] = cbind(parammat, b[[i]])#
}
b
C = do.call(rbind, b)
C
dim(B)
dim(C)
aggregate(data=C, `2` ~ n + np)
aggregate(data=C, `2` ~ n + p)
aggregate(data=C, `2` ~ n + p, mean)
aggregate(data=C, `2` ~ n + p, sd)
aggregate(data=C, `2` ~ n + p + snr + grid, mean)
plot(C$n, C$`2`)
plot(C$snr, C$`2`)
res[[2]]
res[[2]]$ari
res[[3]]$ari
res[[3]][[1]]$ari
res[[3]][[50]]$ari
dofprop = function(datres){#
  parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,800,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
  # plot(fit,1)#
  # plot(fit,2)#
  # plot(fit,3)#
  # plot(fit,4)#
  aris = longbc:::ari.longbc(fit, g)#
  best = which.max(aris)#
  ari = max(aris)#
  nb = length(unique(fit$fits[[best]]$cb))#
  return(list(dat=dat, nb=nb, ari=ari))#
}
dofprop(dats[[1]])
datres
dats[[1]]
datres = dats[[1]]
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,800,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)
longbc:::plot.longbc(fit,1 )
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,8000,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)
longbc:::plot.longbc(fit,1 )
datres = dats[[1]]
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,800,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
plot(fit,1 )
longbc:::plot.longbc(fit,1 )
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,8000,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
plot(fit,1 )
longbc:::plot.longbc(fit,1 )
longbc:::plot.longbc(fit,1 )
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,8000,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
longbc:::plot.longbc(fit,1 )
datres = dats[[2]]
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,8000,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
longbc:::plot.longbc(fit,1 )
datres = dats[[3]]
parm = datres[[1]]#
  dat = datres[[2]]#
  XtXrhoDeltai = datres[[3]]#
  V = datres[[4]]#
  ols = datres[[5]]#
  betaij = dat$beta#
  g = dat[,c("subj","feat","cs","cf","cb","beta")]#
  g = g[!duplicated(g),]#
  g$ols = ols#
  betaij = g$beta#
  n = parm$n#
  p = parm$p#
  snr = parm$snr#
  nb = parm$nb#
  snb = sqrt(nb)#
  exch = parm$exch#
  grid = parm$grid#
  # Longitudinal BC#
  fit = longbc:::longbc(dat = dat, lambdas = seq(0,8000,length.out=20), tausd=1/4, rho=1, tol.abs=1e-2, tol.rel=1e-3,niter = 40, XtXrhoDeltai = XtXrhoDeltai,trace=TRUE,nnk=4,wtype="l2",sparsew=FALSE,loud=FALSE)#
longbc:::plot.longbc(fit,1 )
datres = dats[[4]]
length(dats)
dats[[1]]
dats[[1]][[1]]
dats = readRDS("simulated_data.rds")
length(dats)
dats[[1]]
dats = readRDS("nsimulated_data.rds")
plotdat(dats[[1]][[2]][[1]])
plotdat(dats[[1]][[2]][[2]])
plotdat(dats[[1]][[2]][[3]])
plotdat(dats[[1]][[3]][[2]])
plotdat(dats[[1]][[4]][[2]])
plotdat(dats[[1]][[11]][[2]])
